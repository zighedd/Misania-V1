import { DataSourceService } from '../services/dataSourceService';
import { HarvestingConfigService } from '../services/harvestingConfigService';

export async function displayPromptForTPU() {
  try {
    console.log('üîç Recherche du site "tpu" dans la base de donn√©es...\n');
    
    // R√©cup√©rer tous les sites pour trouver "tpu"
    const allSources = await DataSourceService.getAllDataSources();
    const site = allSources.find(s => s.name.toLowerCase() === 'tpu');
    
    if (!site) {
      console.log('‚ùå Site "tpu" non trouv√© dans la base de donn√©es');
      console.log('Sites disponibles:', allSources.map(s => s.name));
      return;
    }

    console.log('‚úÖ Site "tpu" trouv√©:', site.name);
    console.log('URL:', site.url);
    
    // R√©cup√©rer la configuration de moissonnage
    const configs = await HarvestingConfigService.getConfigsByDataSource(site.id);
    const config = configs[0];
    
    if (!config) {
      console.log('‚ö†Ô∏è Aucune configuration de moissonnage trouv√©e pour ce site');
    }

    // G√©n√©rer l'ID de session et timestamp
    const sessionId = crypto.randomUUID();
    const timestamp = new Date().toISOString();

    // Extraire les donn√©es de configuration
    const selectors = (config?.selectors as any) || {};
    const filters = (config?.filters as any) || {};

    // G√©n√©rer le prompt complet
    const prompt = `SYST√àME DE MOISSONNAGE MISSANIA-MOISSON
=======================================

CONFIGURATION DE MOISSONNAGE
Site cible : ${site.name}
URL : ${site.url}
Type de source : ${site.type}
Statut : ${site.status}
Description : ${site.description || 'Aucune description'}

PARAM√àTRES DE PLANIFICATION
---------------------------
Fr√©quence : ${config?.frequency || 'manual'}
Pages maximum : ${config?.max_pages || 10}
D√©lai entre requ√™tes : ${config?.delay_between_requests || 1000}ms
Date de d√©but : ${selectors.dateRange?.start || 'Non d√©finie'}
Date de fin : ${selectors.dateRange?.end || 'Non d√©finie'}

CRIT√àRES DE S√âLECTION
---------------------
Formats de documents accept√©s : ${selectors.documentFormats?.join(', ') || 'pdf, docx'}
Langues accept√©es : ${selectors.languages?.join(', ') || 'FR'}

S√âLECTEURS CSS
--------------
S√©lecteur de titre : ${selectors.titleSelector || 'h1, .title, .document-title'}
S√©lecteur de contenu : ${selectors.contentSelector || '.content, article, .main-content'}
S√©lecteur de date : ${selectors.dateSelector || '.date, time, .publish-date'}
S√©lecteur de liens : ${selectors.linkSelector || 'a[href$=\\'.pdf\\'], a[href$=\\'.docx\\']'}

FILTRES DE CONTENU
------------------
Mots-cl√©s √† inclure : ${filters.keywords || 'Tous documents'}
Mots-cl√©s √† exclure : ${filters.excludeKeywords || 'Aucun'}
Taille minimum : ${filters.minSize || '0'}MB
Taille maximum : ${filters.maxSize || 'Illimit√©e'}MB

INSTRUCTIONS D'EX√âCUTION
------------------------
1. Analyser la structure du site web cible : ${site.url}
2. Appliquer les s√©lecteurs CSS pour identifier les √©l√©ments
3. Extraire les documents correspondant aux crit√®res d√©finis
4. Respecter le d√©lai de ${config?.delay_between_requests || 1000}ms entre chaque requ√™te
5. Limiter le scan √† ${config?.max_pages || 10} pages maximum
6. Collecter maximum ${config?.max_pages || 10} documents selon les formats (${selectors.documentFormats?.join(', ') || 'pdf, docx'}) et langue (${selectors.languages?.join(', ') || 'FR'})
7. Enregistrer chaque r√©sultat dans harvest_results avec metadata compl√®te
8. Logger toutes les op√©rations (succ√®s/erreurs) dans harvest_logs
9. Signaler imm√©diatement tout incident ou erreur rencontr√©

D√âBUT DU PROCESSUS DE MOISSONNAGE
ID de session : ${sessionId}
Timestamp : ${timestamp}
Data Source ID : ${site.id}
Config ID : ${config?.id || 'Aucune configuration'}`;

    console.log('\nüìã PROMPT UTILISATEUR G√âN√âR√â :\n');
    console.log('='.repeat(80));
    console.log(prompt);
    console.log('='.repeat(80));
    
    return prompt;
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du prompt:', error);
    return null;
  }
}

// Ex√©cuter la fonction
displayPromptForTPU();